// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// stm_samp
arma::umat stm_samp(arma::vec theta, arma::mat x, int K);
RcppExport SEXP _elogitR_stm_samp(SEXP thetaSEXP, SEXP xSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(stm_samp(theta, x, K));
    return rcpp_result_gen;
END_RCPP
}
// elpatterns
arma::mat elpatterns(int K, int Kmax);
RcppExport SEXP _elogitR_elpatterns(SEXP KSEXP, SEXP KmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type Kmax(KmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(elpatterns(K, Kmax));
    return rcpp_result_gen;
END_RCPP
}
// flpatterns
arma::mat flpatterns(int K);
RcppExport SEXP _elogitR_flpatterns(SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(flpatterns(K));
    return rcpp_result_gen;
END_RCPP
}
// elprofile
double elprofile(double z, arma::vec theta, arma::rowvec y, arma::rowvec x, int Kmax);
RcppExport SEXP _elogitR_elprofile(SEXP zSEXP, SEXP thetaSEXP, SEXP ySEXP, SEXP xSEXP, SEXP KmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type Kmax(KmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(elprofile(z, theta, y, x, Kmax));
    return rcpp_result_gen;
END_RCPP
}
// flprofile
double flprofile(double z, arma::vec theta, arma::rowvec y, arma::rowvec x);
RcppExport SEXP _elogitR_flprofile(SEXP zSEXP, SEXP thetaSEXP, SEXP ySEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(flprofile(z, theta, y, x));
    return rcpp_result_gen;
END_RCPP
}
// elstm
Rcpp::List elstm(arma::vec theta, arma::mat y, arma::mat x, int Kmax, bool hessian);
RcppExport SEXP _elogitR_elstm(SEXP thetaSEXP, SEXP ySEXP, SEXP xSEXP, SEXP KmaxSEXP, SEXP hessianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type Kmax(KmaxSEXP);
    Rcpp::traits::input_parameter< bool >::type hessian(hessianSEXP);
    rcpp_result_gen = Rcpp::wrap(elstm(theta, y, x, Kmax, hessian));
    return rcpp_result_gen;
END_RCPP
}
// flstm
Rcpp::List flstm(arma::vec theta, arma::mat y, arma::mat x, bool hessian);
RcppExport SEXP _elogitR_flstm(SEXP thetaSEXP, SEXP ySEXP, SEXP xSEXP, SEXP hessianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type hessian(hessianSEXP);
    rcpp_result_gen = Rcpp::wrap(flstm(theta, y, x, hessian));
    return rcpp_result_gen;
END_RCPP
}
// elrsm
Rcpp::List elrsm(arma::vec theta, arma::mat y, int m, int p, int Kmax, bool hessian);
RcppExport SEXP _elogitR_elrsm(SEXP thetaSEXP, SEXP ySEXP, SEXP mSEXP, SEXP pSEXP, SEXP KmaxSEXP, SEXP hessianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Kmax(KmaxSEXP);
    Rcpp::traits::input_parameter< bool >::type hessian(hessianSEXP);
    rcpp_result_gen = Rcpp::wrap(elrsm(theta, y, m, p, Kmax, hessian));
    return rcpp_result_gen;
END_RCPP
}
// flrsm
Rcpp::List flrsm(arma::vec theta, arma::mat y, int m, int p, bool hessian);
RcppExport SEXP _elogitR_flrsm(SEXP thetaSEXP, SEXP ySEXP, SEXP mSEXP, SEXP pSEXP, SEXP hessianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type hessian(hessianSEXP);
    rcpp_result_gen = Rcpp::wrap(flrsm(theta, y, m, p, hessian));
    return rcpp_result_gen;
END_RCPP
}
// mnl_samp
arma::umat mnl_samp(arma::vec theta, arma::mat x, int K);
RcppExport SEXP _elogitR_mnl_samp(SEXP thetaSEXP, SEXP xSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(mnl_samp(theta, x, K));
    return rcpp_result_gen;
END_RCPP
}
// elmnl
Rcpp::List elmnl(arma::vec theta, arma::mat y, arma::mat x, int Kmax, bool hessian);
RcppExport SEXP _elogitR_elmnl(SEXP thetaSEXP, SEXP ySEXP, SEXP xSEXP, SEXP KmaxSEXP, SEXP hessianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type Kmax(KmaxSEXP);
    Rcpp::traits::input_parameter< bool >::type hessian(hessianSEXP);
    rcpp_result_gen = Rcpp::wrap(elmnl(theta, y, x, Kmax, hessian));
    return rcpp_result_gen;
END_RCPP
}
// flmnl
Rcpp::List flmnl(arma::vec theta, arma::mat y, arma::mat x, bool hessian);
RcppExport SEXP _elogitR_flmnl(SEXP thetaSEXP, SEXP ySEXP, SEXP xSEXP, SEXP hessianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type hessian(hessianSEXP);
    rcpp_result_gen = Rcpp::wrap(flmnl(theta, y, x, hessian));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_elogitR_stm_samp", (DL_FUNC) &_elogitR_stm_samp, 3},
    {"_elogitR_elpatterns", (DL_FUNC) &_elogitR_elpatterns, 2},
    {"_elogitR_flpatterns", (DL_FUNC) &_elogitR_flpatterns, 1},
    {"_elogitR_elprofile", (DL_FUNC) &_elogitR_elprofile, 5},
    {"_elogitR_flprofile", (DL_FUNC) &_elogitR_flprofile, 4},
    {"_elogitR_elstm", (DL_FUNC) &_elogitR_elstm, 5},
    {"_elogitR_flstm", (DL_FUNC) &_elogitR_flstm, 4},
    {"_elogitR_elrsm", (DL_FUNC) &_elogitR_elrsm, 6},
    {"_elogitR_flrsm", (DL_FUNC) &_elogitR_flrsm, 5},
    {"_elogitR_mnl_samp", (DL_FUNC) &_elogitR_mnl_samp, 3},
    {"_elogitR_elmnl", (DL_FUNC) &_elogitR_elmnl, 5},
    {"_elogitR_flmnl", (DL_FUNC) &_elogitR_flmnl, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_elogitR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
